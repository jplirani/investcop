#!/usr/bin/env python
# coding: utf-8

# # InvestCop Cockpit

# ### Date: 1/02/22

# In[1]:


#!/usr/bin/env python
# coding: utf-8

# In[25]:


# -*- coding: utf-8 -*-
"""investcop-streamlit-original.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1teOk6A0XNe4nyYeJ4sbvx2IjXpOLC0G5

# InvestCop
## Main DataFrame to generate Analysis Data from Yahoo Finance
## Streamlit Edt
## Date: 04/11/21

## References
"""

import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
import seaborn as sns
import numpy as np
import ta
from ta.volatility import BollingerBands
from ta.trend import MACD, SMAIndicator
from ta.momentum import RSIIndicator
import streamlit as st
import datetime
import tabulate
import plotly.express as px
import os
import datetime

summary=pd.read_csv('summary.csv',low_memory=False)
summary.drop(columns='Unnamed: 0',inplace=True)

## Choose stock

types=['all','bdr','cambio','cripto','fii','index','bov','commodities','etf','futures']
featopts=['GainRelative','GainPerDayCurrent', 'GainPerDayEstimated','LastWaveValueGain', 'Congruence','DeltaN', 'YieldEst']
rsiopts=['all','<30','<50','<70','>70']
bollopts=['all','Boll-2MA','MA2Boll+']
gainopts=['all','Q1','Q2','Q3','Q4']
#stock="USDBRL=X"    # ETH-USD BTTL3.SA USDBRL=X  ^N225
period='2y'

def insert(df, row):
    insert_loc = df.index.max()

    if pd.isna(insert_loc):
        df.loc[0] = row
    else:
        df.loc[insert_loc + 1] = row

## Side Menu Streamlit

##########
# sidebar #
###########
type1 = st.sidebar.selectbox('Select Market type', types)
feature = st.sidebar.selectbox('Choose Analysis feature (y-axis)',featopts)
rsi=st.sidebar.selectbox('Choose RSI option',rsiopts)
boll=st.sidebar.selectbox('Choose Bollinger option',bollopts)
top=st.sidebar.selectbox('Choose Gain Per Day filter',gainopts)
#stock='ETH-USD' # ----> REMOVE

if top!='all':
    summary['GainQuartile']=pd.qcut(summary.GainPerDayCurrent, 4, labels=["Q4", "Q3", "Q2","Q1"])
    
   
#type1='bov'
if type1=='all':
    data=summary
else:
    data=summary.query("Type == @type1")

if rsi=='<30':
    data=data.query("(RSI > 0) & (RSI < 30)")
elif rsi=='<50':
    data=data.query("(RSI > 0) & (RSI < 50)")
elif rsi=='<70':
    data=data.query("(RSI > 0) & (RSI < 70)")
elif rsi=='>70':
    data=data.query("RSI > 70")
    
if top!='all':
    data=data.query("GainQuartile == @top")
#boll='Boll-2MA'
if boll=='Boll-2MA':
   data=data[data['Boll-2MA'] == True]
elif boll=='MA2Boll+':
    data=data[data['MA2Boll+'] == True]
   
"""### InvestCop 
   #### Cockpit """    

## Plot
# last update info
filename='summary.csv'
def modification_date(filename):
    t = os.path.getmtime(filename)
    return datetime.datetime.fromtimestamp(t)
date=modification_date(filename)
tz=datetime.timezone(datetime.timedelta(hours=-4))
datebr=date.astimezone(tz)
horastr=datebr.strftime("%d/%b/%Y %H:%M")
st.write('Last updated in: ' + horastr + ' (Brasilia)')
#st.markdown('##### Last updated in: ' + horastr + ' (Brasilia)')

fig2=px.scatter(data_frame=data,x='TRelative',y=feature,color='Type',hover_name='Symbol', title=feature + ' vs Period for ' + type1 + ' market')

if data.TRelative.size > 0:
    lim1=max(data.TRelative)
else:
    lim1=0

fig2.add_shape(type="line",
    x0=-10, y0=-10, x1=lim1, y1=lim1,
    line=dict(color="RoyalBlue",width=3))
st.plotly_chart(fig2, use_container_width=True)

# Display table and download
#st.success('Filtered Summary data')
st.dataframe(data)
st.download_button(label='Download CSV',data=data.to_csv(),mime='text/csv')

# Watchlist
st.success('Wacth list - ' + feature)
watch=summary.query(f"({feature} > -5) & ({feature} < 5) & (TRelative > 10 ) & (TRelative < 100)")
st.dataframe(watch)
st.download_button(label='Download Watch List CSV',data=data.to_csv(),mime='text/csv')

# BoxPlot
#st.write('Gain Per Day by Market type')
st.success('BoxPlot Analysis')
fig3=px.box(summary,y=feature,color='Type',hover_name='Symbol',title= feature + ' per Market Type - Box Plot')
st.plotly_chart(fig3, use_container_width=True)

# CAll Summary download
st.success('All Summary data')
st.download_button(label='Download complete Summary CSV',data=summary.to_csv(),mime='text/csv', file_name='summary.csv')

#st.markdown(summary.round(decimals=2).transpose().to_markdown())
#st.table(summary.iloc[:,:])
#st.write(summary.iloc[:])
#print(summary)