# -*- coding: utf-8 -*-
"""investcop-from-web-bulk-all.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rk4lZ-4LWKUnFX1_0UdxnYpy-XrWKxkA

# InvestCop
## Main DataFrame to generate Analysis Data from Yahoo Finance
## Multiple stocks , Bulk Generation of Data and Summary
## Sends Summary by FTP
## Date: 24/01/21
"""

#from google.colab import drive
#drive.mount('/content/drive')

"""## Control"""

mode= 'summary'    # 'all' or 'symbol' or 'summary'

#from google.colab import drive
#drive.mount('/content/drive')

"""## References"""

#!pip install yfinance
#!pip install dataframe_image

import pandas_datareader.data as web 
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
import seaborn as sns
import numpy as np
import dataframe_image as dfi

"""## Read Symbols"""

#!ls '/content/drive/MyDrive/InvestCop-dev/symbols/'

types=['bdr','cambio','cripto','fii','index','bov','commodities','etf','futures']
#types=['cripto']

"""## Choose stock

## Bulk Import data from Yahoo Finance and Data Generation
"""

#types=['bdr']

def insert(df, row):
    insert_loc = df.index.max()

    if pd.isna(insert_loc):
        df.loc[0] = row
    else:
        df.loc[insert_loc + 1] = row

summary=pd.DataFrame(columns=['Type', 'Symbol', 'Description','Close','LastWaveStart','LastwaveEnd','LastWavePeriod','LastWaveValueGain','CurrentWaveStart','CurrentPeriod',
                              'CurrentValueGain','TRelative','GainRelative','Congruence','P','DeltaN','YieldEst','GainPerDayCurrent','GainPerDayEstimated', 'Boll-2MA','MA2Boll+','RSI'])

for type in types:
  print('type:',type)
  pathout=f'./{type}/'
  symbolpath=f'./symbols/{type}.csv'
  #print(pathout,symbolpath)
 
  symbolsfile=open(symbolpath, mode='r')
  symbolslist=symbolsfile.readlines()
  symbols=[symbol.strip('\n') for symbol in symbolslist]
  stocks=symbols 
  period='2y'
  #print(stocks)

  tickers=yf.Tickers(stocks)

  #tickersymbol=tickers.symbols[10]
  #tickersymbol
  for tickersymbol in symbols:
    print('symbol:',tickersymbol)
    ticker=tickers.tickers[tickersymbol]
    ydata = ticker.history(period=period)    
    tickername=tickersymbol
    
    data = ydata[['Close']].copy()
    #data.head()
    # data check if not empty dataset
    if data.size<10:
      continue  
    
    data['Delta']=data.Close/data.Close.shift(1) - 1
    data['MA20']=data.Close.rolling(20).mean()
    data['MA50']=data.Close.rolling(50).mean()
    data['MA100']=data.Close.rolling(100).mean()
    data['MA200']=data.Close.rolling(200).mean()
    data['MA8W']=data.Close.rolling(56).mean()
    data['Boll+']=data['MA20'] + 2*data.Close.rolling(20).std()
    data['Boll-']=data['MA20'] - 2*data.Close.rolling(20).std()
    data['PosDiff']=data.Close - data.Close.shift(1)
    data['PosDiff'].loc[data.PosDiff<0]=0
    data['NegDiff']=data.Close-data.Close.shift(1)
    data['NegDiff'].loc[data.NegDiff>0]=0
    data['SumPosDiff14']=data.PosDiff.rolling(14).sum()
    data['SumNegDiff14']=data.NegDiff.rolling(14).sum()
    data['AvgPosDiff14']=data.PosDiff.rolling(14).mean()
    data['AvgNegDiff14']=data.NegDiff.rolling(14).mean()
    data['RFI20']= 100-(100/(1+(abs(data.AvgPosDiff14 / data.AvgNegDiff14))))         
    data['AvgPosDiff100']=data.PosDiff.rolling(100).mean()
    data['AvgNegDiff100']=data.NegDiff.rolling(100).mean()
    data['RFI100']= 100-(100/(1+(abs(data.AvgPosDiff100 / data.AvgNegDiff100))))     
    #data.iloc[101:105]
    '''
    # Plot 1 - Stock
#@title  { form-width: "10%" }
    data.Close.plot(figsize=(20,10),title=tickername,marker='o',style='-')
    data.MA20.plot(color='grey',label='MA20')
    data['Boll+'].plot(color='green',style='--',label='Bol+')
    data['Boll-'].plot(color='red',style='--',label='Bol-')
    plt.plot();
  
    # Plot 2 RFI
    data['RFI20'].plot(figsize=(20,5),title=tickername + ' - Indicators',color='black')
    data['RFI100'].plot(color='pink')
    plt.axhline(y=30,color='y',linestyle ='--')
    plt.axhline(y=70,color='y',linestyle ='--')
    plt.ylim(0,100)
    plt.yticks(list(range(0,110,10)))
    plt.plot();
    #@title
    '''
    # Wave Analysis
    rfi_start=data.query('RFI20 <30 and Delta <0').index
    rfi_end=data.query('RFI20>70 and Delta >0').index
    # another approach
    data['daybefore']=data.RFI20.shift()
    rfi_start=data.query('RFI20>=30 and daybefore<30').index
    rfi_end=data.query('RFI20>=70 and daybefore<70').index
    waves=[]
    if len(rfi_start)==0 or len(rfi_end)==0:
      continue
    lastmin=rfi_start[0]
    if any(rfi_end>lastmin)==False:  #check/fix for CASH3
      continue  
    lastmax=rfi_end[rfi_end>lastmin][0]
    rfi=data.RFI20
    for min in rfi_start:
        if min < lastmax:
          if lastmin > min:
            lastmin=min
         # print('lastmin=',lastmin)
        else:
          #print('new-entry:wave=',lastmin,lastmax)
          waves.append((lastmin,lastmax))
          if len(rfi_end[rfi_end>min])>0:
            lastmax=rfi_end[rfi_end>min][0]
            lastmin=min
            #print('next max =',lastmax)
          else:
            break
    waves=list(dict.fromkeys(waves))
    #waves[0][0]
    # True max and mins
    #waves
    truewaves=[]
    i=0
    for i in range(0,len(waves)):
      wave=waves[i]
      if i< len(waves)-1:
        next=waves[i+1][0]
      else:
        next=data.index[-1]
      dmin=data.loc[wave[0]:wave[1]].Close.argmin()
      min=data.loc[wave[0]:wave[1]].iloc[dmin].name

      dmax=data.loc[wave[1]:next].Close.argmax()
      max=data.loc[wave[1]:next].iloc[dmax].name
      truewaves.append((min,max))
    
    # Generate Summary
    if mode=='all' or mode=='summary':
      if len(truewaves)<1:
        continue
        
      LastWaveStart=truewaves[-1][0]
      LastwaveEnd=truewaves[-1][1]

      LastRFIEnd=rfi_end[-1]
      LastRFIStart=rfi_start[-1]

      LastWavePeriod=LastwaveEnd - LastWaveStart

      LastWaveValueGain= data.loc[LastWaveStart:LastwaveEnd].Delta.sum()*100

      CurrentWaveRSIRestart=data.query('RFI20<30 and daybefore>30').index[-1] 
      dmin=data.loc[CurrentWaveRSIRestart:].Close.argmin()
      CurrentWaveStart=data.loc[CurrentWaveRSIRestart:].iloc[dmin].name        

      today = data.iloc[-1].name
      CurrentPeriod= today - CurrentWaveStart

      CurrentValueGain=data.loc[CurrentWaveStart:].Delta.sum()*100 # -->

      TRelative=100*CurrentPeriod.days/LastWavePeriod.days #-->

      GainRelative=100*CurrentValueGain/LastWaveValueGain # -->

      Congruence=GainRelative - TRelative # --> updated 02022022

      P= 100* (CurrentValueGain/LastWaveValueGain) / (abs(1-Congruence)) # -->

      DeltaN=LastWavePeriod.days-CurrentPeriod.days # -->

      YieldEst= LastWaveValueGain - CurrentValueGain   #-->

      GainPerDayCurrent= 100* (CurrentValueGain/CurrentPeriod.days)

      GainPerDayEstimated= 100* (LastWaveValueGain - CurrentValueGain)/(LastWavePeriod.days - CurrentPeriod.days)

      Close=data.iloc[-1].Close

      RSI=data.iloc[-1].RFI20

      BollNeg2MA = (Close > data.iloc[-1]['Boll-']) and (Close <data.iloc[-1]['MA20'] )

      MA2BollPos = (Close > data.iloc[-1]['MA20'] ) and (Close <data.iloc[-1]['Boll+'] )

      line= [type, tickersymbol, tickername,  Close, LastWaveStart,LastwaveEnd,LastWavePeriod,
            LastWaveValueGain,CurrentWaveStart,CurrentPeriod, CurrentValueGain,TRelative,
            GainRelative,Congruence,P,DeltaN,YieldEst,GainPerDayCurrent,GainPerDayEstimated,
            BollNeg2MA,MA2BollPos, RSI]

      insert(summary,line)
      # Create analysis image
      if mode=='symbols' or mode=='all':
        dfi.export(summary.tail(1).transpose(),pathout+tickersymbol+'_analysis.png',table_conversion ='matplotlib')

    #Plot 3 - All-in-One + Waves
    if mode=='all' or mode=='symbol':
      fig, ax1 = plt.subplots()
      data.Close.plot(figsize=(20,10),title=tickername,marker='o',style='-',ax=ax1)
      data.MA20.plot(color='grey',label='MA20',ax=ax1)
      data['Boll+'].plot(color='red',style='--',label='Bol+',ax=ax1)
      data['Boll-'].plot(color='green',style='--',label='Bol-',ax=ax1)
      #Polynomial 6 degree
      x=np.array(range(data.shape[0]))
      coefs=np.polyfit(x,data.Close,deg=6)
      poly=np.poly1d(coefs)
      y=poly(x)
      plt.plot(data.index,y,color='purple',label='Poly-6')
      ax1.set_ylim(auto=True)
      ax1.set_ylabel('Close', color='blue')
      ax1.legend(loc='upper left')
      for truewave in truewaves:
        plt.plot([truewave[0]],data.loc[truewave[0]].Close,marker='+',color='red', markersize=30)
        plt.plot([truewave[1]],data.loc[truewave[1]].Close,marker='+',color='red', markersize=30)
      plt.plot(CurrentWaveStart,data.loc[CurrentWaveStart].Close,marker='*',color='orange', markersize=30)
      
      # Axis 2
      ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
      data['RFI20'].plot(figsize=(20,10),color='black',ax=ax2)
      data['RFI100'].plot(color='pink',ax=ax2)
      ax2.axhline(y=30,color='y',linestyle ='--')
      ax2.axhline(y=70,color='y',linestyle ='--')
      for wave in waves:
        plt.plot([wave[0]],data.loc[wave[0]].RFI20,marker='o',color='red', markersize=20)
        plt.plot([wave[1]],data.loc[wave[1]].RFI20,marker='o',color='red', markersize=20)

      ax2.set_ylabel('IFR', color='red')  # we already handled the x-label with ax1
      ax2.set_yticks(list(range(0,110,10)))
      ax2.legend()
      fig.tight_layout() 
      plt.savefig(pathout+tickersymbol+'.png')
      # Exprt Csv
      data.to_csv(pathout+tickersymbol+'.csv')
      plt.close()
      #plt.show();

summary.round(decimals=2).to_csv('summary.csv')

# Sends Summary by FTP
from ftplib import FTP
ftp=FTP('155.254.244.39')
ftp.login(user='sergiobarrosgoku',passwd='Raul2808*')
ftp.cwd('www.Investcop.somee.com')

file=open('summary.csv','rb')
ftp.storbinary('STOR summary.csv',file)

ftp.quit()

file.close()

# loaclweb
ftp=FTP('ftp.investscorp.com.br')
ftp.login(user='investscorp1',passwd='Tank76retJRCS!')
ftp.cwd('web')
file=open('summary.csv','rb')
ftp.storbinary('STOR summary.csv',file)

ftp.quit()

file.close()

print('DONE')
